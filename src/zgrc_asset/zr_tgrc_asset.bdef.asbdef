
managed implementation in class ZBP_R_TGRC_ASSET unique;
strict ( 2 );
with draft;
//added by PPT020
define own authorization context
{
  'Z_ASSET_O';
}
//ADDEDBY PPT020
define behavior for ZR_TGRC_ASSET alias Asset
persistent table ZTGRC_ASSET
with additional save
draft table ZTGRC_ASSET_D
etag master Lastchangedat
lock master total etag Lastchangedat
authorization master( global,instance )

{

field( mandatory : create)
RecordType;

  field ( readonly )
   AssetUuid,
   Createdby,
   Createdat,
   Lastchangedby,
   Lastchangedat;



  field ( numbering : managed )
   AssetUuid;

//field ( mandatory : create, readonly : update )
//field ( mandatory : create )//, readonly : update )
////field ( mandatory )
//AssetExternalId  ,
//Assetname;

//field ( readonly : update ) AssetExternalId, Assetname ;
field ( features : instance ) AssetExternalId, Assetname ;
  create( precheck );

    update( precheck );
  delete;

association _AssetVal  { create; with draft; }

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;

  //draft determine action Prepare;

  draft determine action Prepare
  {
   validation AssetVal~validate_asset_value;
  }
factory action copyasset[1..*];

//determination set_Asset_Value_Formula on modify { create; }
side effects { field RecordType affects field *; }

  mapping for ZTGRC_ASSET
  {
    AssetUuid = asset_uuid;
    AssetExternalId = asset_external_id;
//    ListId = list_id;
//    ValueId = value_id;
    Recordtype = record_type;
    AssetName = asset_name;
    AccountingCode = accounting_code;
    Afe = afe;
    AgreedValueLookup = agreed_value_lookup;
    AreaSqKm = area_sq_km;
    AssetCategory = asset_category;
    AssetDescription = asset_description;
    AssetMakeOrModel = asset_make_or_model;
    AssetPolicyHistory = asset_policy_history;
    AssetStatus = asset_status;
    AssetTypeP = asset_type_p;
    Type = type;
    DeclaredValue = declared_value;
    AssetValueStatus = asset_value_status;
    AuxiliaryEngineHorsepower = auxiliary_engine_horsepower;
    AuxiliaryEngineKilowatts = auxiliary_engine_kilowatts;
    AuxiliaryEngineMake = auxiliary_engine_make;
    AuxiliaryEngineRpm = auxiliary_engine_rpm;
    AuxiliaryEngineType = auxiliary_engine_type;
    NumberAuxiliaryEngines = number_auxiliary_engines;
    Block = block;
    BlowoutPreventerRating = blowout_preventer_rating;
    BottomHoleTemperature = bottom_hole_temperature;
    Breadth = breadth;
    BreadthExtremeMeters = breadth_extreme_meters;
    BuildingYardCode = building_yard_code;
    BuildingYardNumber = building_yard_number;
    CallSign = call_sign;
    CancellationDate = cancellation_date;
    CargoValue = cargo_value;
    CauseOfCancellation = cause_of_cancellation;
    ClassEngine = class_engine;
    ClassGen = class_gen;
    ClassIce = class_ice;
    ClassificationSociety = classification_society;
    ClassificationSocietyCode = classification_society_code;
    ContentEquipment = content_equipment;
    Continent = continent;
    Currency = currency;
    CurrentAssetValue = current_asset_value;
    CurrCovrUnderConstructIns = curr_covr_under_construct_ins;
    DateAddedAcquired = date_added_acquired;
    DtAssetAttchDtchToPolicy = dt_asset_attch_dtch_to_policy;
    DateOfRemovalDisposal = date_of_removal_disposal;
    DateOwnershipEffective = date_ownership_effective;
    DeadweightTonnage = deadweight_tonnage;
    Depth = depth;
    Description = description;
    DisplacementMeters = displacement_meters;
    DoubleHull = double_hull;
    DraughtMeters = draught_meters;
    DrillingContrator = drilling_contrator;
    ExpectedRedeliveryDate = expected_redelivery_date;
    Fi = fi;
    FieldCode = field_code;
    Flag = flag;
    FlagSrc = flag_src;
    FleetNumber = fleet_number;
    FormulaDeadweight = formula_deadweight;
    GrossRegisterTonnage = gross_register_tonnage;
    GrossTonnage = gross_tonnage;
    HeadOwners = head_owners;
    HfmCode = hfm_code;
    HierarchyManaged = hierarchy_managed;
    ImoNumber = imo_number;
    HierarchyNode = hierarchy_node;
    July2023update = july2023update;
    LastHandledDate = last_handled_date;
    LayUpDate = lay_up_date;
    LayUpPosition = lay_up_position;
    LayUpType = lay_up_type;
    LengthOverallMeters = length_overall_meters;
    Location = location;
    MaerskOilInterest = maersk_oil_interest;
    MainEngineHorsepower = main_engine_horsepower;
    MainEngineKilowatts = main_engine_kilowatts;
    MainEngineMake = main_engine_make;
    MainEngineRpm = main_engine_rpm;
    MainEngineType = main_engine_type;
    NumberMainEngines = number_main_engines;
    ManagingOwners = managing_owners;
    Material = material;
    Maxvaluationdate = maxvaluationdate;
    Md = md;
    DepthBelowSeabedFeet = depth_below_seabed_feet;
    MmsiNumber = mmsi_number;
    Notes = notes;
    NumberOfPassengers = number_of_passengers;
    ObjectStatus = object_status;
    Operator = operator;
    Ownership = ownership;
    OwnershipStatus = ownership_status;
    PIClubNew = p_i_club_new;
    ParcelTanker = parcel_tanker;
    PartOfJointVentureYN = part_of_joint_venture_y_n;
    Partners = partners;
    Picture = picture;
    Port = port;
    PortOfRegistry = port_of_registry;
    ProductionStart = production_start;
    ProgramEntry = program_entry;
    ProgramExit = program_exit;
    ProgramLine = program_line;
    Propulsion = propulsion;
    Property = property;
    PurchaseDate = purchase_date;
    RegistrationDate = registration_date;
    RegistryType = registry_type;
    Revenue = revenue;
    RkAssetValueStatusDate = rk_asset_value_status_date;
    SegregatedBallastTank = segregated_ballast_tank;
    SerialNo = serial_no;
    SpudDate = spud_date;
    Subtype = subtype;
    TerminalName = terminal_name;
    TotalLengthKm = total_length_km;
    Tvd = tvd;
    UniqueId1 = unique_id_1;
    UniqueId2 = unique_id_2;
    Utilisation = utilisation;
    VesselCode = vessel_code;
    VesselExName = vessel_ex_name;
    WarehouseOfficeBuildings = warehouse_office_buildings;
    WaterDepth = water_depth;
    YearBuilt = year_built;
    YearOfForecast1 = year_of_forecast1;
    YearOfManufacture = year_of_manufacture;
    Createdby = createdby;
    Createdat = createdat;
    Lastchangedby = lastchangedby;
    Lastchangedat = lastchangedat;
  }
}

define behavior for ZR_TGRC_ASSET_VAL alias AssetVal
persistent table ZTGRC_ASSET_VAL
with additional save
draft table ZTGRC_ASST_VAL_D
etag master Lastchangedat
lock dependent by _Asset
authorization dependent by _Asset

{
association _Asset { with draft; }

  field ( readonly )
   AssetUuid,
    AssetValueUuid,
   Createdby,
   Createdat,
   Lastchangedby,
   Lastchangedat;

  field ( numbering : managed )
   AssetValueUuid;
   //AssetUuid;

field ( mandatory )
AssetValueExternal,
Assetvalue;

validation validate_asset_value on save { create; update; field assetvalue ; }
determine action validateAssetValue { validation validate_asset_value; }
determination set_Asset_Value_Formula on modify { create; update; }



  update( precheck );
  delete;



  mapping for ZTGRC_ASSET_VAL
  {

    AssetUuid = asset_uuid;
    AssetValueUuid = asset_value_uuid;
    AssetValueExternal = asset_value_external;
//    ListId = list_id;
//    ValueId = value_id;
    Recordtype = record_type;
    AmountOfInterest = amount_of_interest;
    AmountOfInterestChangeAmt = amount_of_interest_change_amt;
    ApmmInsuredValue = apmm_insured_value;
    AssetValue  = asset_value;
    AssetCategory = asset_category;
    AssetStatus = asset_status;
    AssetValueFormula = asset_value_formula;
    AssetValueOnl = asset_value_onl;
    AssetValue100Percent = asset_value_100_percent;
    AssetVal100PercntChngAmt = asset_val_100_percnt_chng_amt;
    AssetValueChangeAmount = asset_value_change_amount;
    AssetValueForInterest = asset_value_for_interest;
    AssetValForInterestchngAmt = asset_val_for_interestchng_amt;
    AssetName = asset_name;
    AssetValueStatus = asset_value_status;
    BusinessInterruption = business_interruption;
    BusinessInterruptionChngAmt = business_interruption_chng_amt;
    BusinessUnit = business_unit;
    CargoValue = cargo_value;
    ContentEquipment = content_equipment;
    CranesAndHandlingEquipment = cranes_and_handling_equipment;
    CranesHandlingEquipChngAmt = cranes_handling_equip_chng_amt;
    Createdb = createdb;
    Currency = currency;
    CurrencyCode = currency_code;
    DeadweightTonnage = deadweight_tonnage;
    DeclaredValue = declared_value;
    Deductible = deductible;
    Equipment = equipment;
    Flag = flag;
    FlagId = flag_id;
    GrossTonnage = gross_tonnage;
    Hierarchy = hierarchy;
    HullValue = hull_value;
    HullValueChangeAmount = hull_value_change_amount;
    Infrastructure = infrastructure;
    Lastmodifiedb = lastmodifiedb;
    MostRecent = most_recent;
    RkNextPtr = rk_next_ptr;
    OtliValue = otli_value;
    OtliValueChangeAmount = otli_value_change_amount;
    HierarchyNode = hierarchy_node;
    OwnerId = owner_id;
    PIClubNew = p_i_club_new;
    PIClub = p_i_club;
    RkPrevPtr = rk_prev_ptr;
    PropHandlingEquipChngAmt = prop_handling_equip_chng_amt;
    Property = property;
    PropertyAndHandlingEquip = property_and_handling_equip;
    PropertyChangeAmount = property_change_amount;
    PvSTOnly = pv_s_t_only;
    RenewalAssignment = renewal_assignment;
    Revenue = revenue;
    RkErrorDetail = rk_error_detail;
    RkErrorFlag = rk_error_flag;
    RkGenAssetValuesPid = rk_gen_asset_values_pid;
    RkPendingVoidCount = rk_pending_void_count;
    RkPidConstructor = rk_pid_constructor;
    Status = status;
    TotalInsuredValue = total_insured_value;
    TotalInsuredValueChngAmt = total_insured_value_chng_amt;
    Utilisation = utilisation;
    Utilization = utilization;
    UtilizationChangeAmount = utilization_change_amount;
    ValuationDate = valuation_date;
    ValuationEndDate = valuation_end_date;
    VarianceNotes = variance_notes;
    VolumeTons = volume_tons;
    WarValue = war_value;
    WarValueChangeAmount = war_value_change_amount;
    WarehouseOfficeBuildings = warehouse_office_buildings;
    Createdby = createdby;
    Createdat = createdat;
    Lastchangedby = lastchangedby;
    Lastchangedat = lastchangedat;
  }
}